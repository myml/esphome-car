esphome:
  name: car2

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "d1f4b73f59db13a41f17db03b6be18a6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Car2 Fallback Hotspot"
    password: "PKFVTZTVQR9f"

captive_portal:

switch:
  - platform: template
    id: up
    name: up
    optimistic: true
  - platform: template
    id: down
    name: down
    optimistic: true
  - platform: template
    id: left
    name: left
    optimistic: true
  - platform: template
    id: right
    name: right
    optimistic: true
number:
  - platform: template
    id: "speed"
    name: "speed"
    optimistic: true
    min_value: 0
    max_value: 100
    on_value:
      then:
        - script.execute: control
    step: 1
button:
  - platform: template
    id: "running"
    on_press:
      then:
        - script.execute: control
output:
  - platform: ledc
    pin: GPIO12
    frequency: 1000
    id: ls
    channel: 2
  - platform: ledc
    pin: GPIO13
    frequency: 1000
    id: rs
    channel: 3
script:
  - id: control
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("control", "u: %d d: %d l: %d r: %d s: %f", id(up).state, id(down).state, id(left).state, id(right).state, id(speed).state/100);
      - if:
          condition:
            switch.is_on: up
          then:
            - if:
                condition:
                  switch.is_on: left
                # 左转
                then:
                  - lambda: |-
                      float level = id(speed).state/100;
                      ls->set_level(0);
                      rs->set_level(level);
                else:
                  - if:
                      condition:
                        switch.is_on: right
                      # 右转
                      then:
                        - lambda: |-
                            float level = id(speed).state/100;
                            ls->set_level(level);
                            rs->set_level(0);
                      # 前进
                      else:
                        - lambda: |-
                            float level = id(speed).state/100;
                            ls->set_level(level);
                            rs->set_level(level);
            - delay: 500ms
      - output.set_level:
          id: ls
          level: 0
      - output.set_level:
          id: rs
          level: 0

web_server:
  port: 80
  js_url: "https://myml.dev/esphome-car/v2/index.js"
  css_url: "https://myml.dev/esphome-car/v2/index.css"

esp32_camera:
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  name: che1-cam
  vertical_flip: false
  resolution: 320x240
  idle_framerate: 0.01fps

esp32_camera_web_server:
  - port: 8081
    mode: stream
